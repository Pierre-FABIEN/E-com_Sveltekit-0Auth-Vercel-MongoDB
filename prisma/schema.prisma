datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String        @unique
  image     String?
  role      String
  addresses Address[]
  orders    Order[]
  transactions Transaction[]
  posts     Post[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  @@map("users")
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  recipient String
  street    String
  city      String
  state     String
  zip       String
  country   String
  userId    String? @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  orders    Order[]
  @@map("addresses")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model Order {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  userId        String            @db.ObjectId
  addressId     String?           @db.ObjectId  
  total         Float             @default(0)
  status        OrderStatus       @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now())
  items         OrderItem[]       // Relation avec OrderItem

  user          User              @relation(fields: [userId], references: [id])
  address       Address?          @relation(fields: [addressId], references: [id])
  statusHistory OrderStatusHistory[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  @@map("order_items")
}

model OrderStatusHistory {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String      @db.ObjectId
  status    OrderStatus
  changedAt DateTime    @default(now())

  order     Order       @relation(fields: [orderId], references: [id])
  @@map("order_status_histories")
}

model Product {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  stock        Int
  images       String[]
  categories   ProductCategory[]
  orderItems   OrderItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  @@map("products")
}

model Category {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  ProductCategory[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  @@map("categories")
}

model Transaction {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  stripePaymentId        String   @unique
  orderId                String   @db.ObjectId
  userId                 String?  @db.ObjectId // Rendre cette relation facultative
  amount                 Float
  currency               String

  customer_details_email String?  @default("")
  customer_details_name  String?  @default("")
  customer_details_phone String?  @default("")

  status                 String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now())

  app_user_name          String
  app_user_email         String
  app_user_recipient     String
  app_user_street        String
  app_user_city          String
  app_user_state         String
  app_user_zip           String
  app_user_country       String
  products               Json     

  user                   User?    @relation(fields: [userId], references: [id]) // Rendre cette relation facultative
  @@map("transactions")
}



model ProductCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  categoryId  String   @db.ObjectId

  product     Product  @relation(fields: [productId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  @@map("product_categories")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("posts")
}